import { INTEGRATED_RenderDynamicFields } from 'ui'

import {
  CreateUserCustomPermissionRequestData,
  CreateUserJobTypeRequestData,
  CreateUserRequestData,
  GetPermissionsBasicInfoResponseData,
  GetUserCustomPermissionsResponseData,
  GetUserDetailsTemplateResponseData,
  GetUserJobTypesResponseData,
  GetUserResponseData,
  GetUsersResponseData,
  UserStatuses,
} from '../types'

const languageOptionsMock = [
  { label: 'English', value: 'English' },
  { label: 'French', value: 'French' },
  { label: 'Arabic', value: 'Arabic' },
]

const defaultUnitOptionsMock = [
  { label: 'Unit 1', value: 'u1' },
  { label: 'Unit 2', value: 'u2' },
  { label: 'Unit 3', value: 'u3' },
]

export const getUserDetailsTemplateMock: GetUserDetailsTemplateResponseData = {
  id: 't1',
  name: 'User Template v1',
  groups: [],
  primaryFields: [
    {
      id: 'f1',
      code: 'userName',
      entityName: INTEGRATED_RenderDynamicFields.DynamicFieldEntities.User,
      entityLevel: null,
      independent: true,
      label: 'User Name',
      hiddenOnCreate: false,
      defaultValue: {},
      status: INTEGRATED_RenderDynamicFields.DynamicFieldStatuses.Active,
      required: true,
      order: 0,
      placeholder: '',
      fieldName: '',
      groupCode: null,
      helpText: '',
      tooltip: '',
      type: INTEGRATED_RenderDynamicFields.DynamicFieldTypes.Text,
      properties: {},
      validation: {
        rules: [],
      },
    },
    {
      id: 'f2',
      code: 'firstName',
      hiddenOnCreate: false,
      status: INTEGRATED_RenderDynamicFields.DynamicFieldStatuses.Active,
      entityName: INTEGRATED_RenderDynamicFields.DynamicFieldEntities.User,
      entityLevel: null,
      independent: true,
      label: 'First Name',
      required: false,
      order: 1,
      placeholder: '',
      fieldName: '',
      groupCode: null,
      helpText: '',
      tooltip: '',
      type: INTEGRATED_RenderDynamicFields.DynamicFieldTypes.Text,
      defaultValue: {},
      properties: {},
      validation: {
        rules: [],
      },
    },
    {
      id: 'f3',
      code: 'lastName',
      entityName: INTEGRATED_RenderDynamicFields.DynamicFieldEntities.User,
      entityLevel: null,
      independent: true,
      label: 'Last Name',
      hiddenOnCreate: false,
      status: INTEGRATED_RenderDynamicFields.DynamicFieldStatuses.Active,
      required: false,
      order: 2,
      placeholder: '',
      fieldName: '',
      groupCode: null,
      helpText: '',
      tooltip: '',
      type: INTEGRATED_RenderDynamicFields.DynamicFieldTypes.Text,
      defaultValue: {},
      properties: {},
      validation: {
        rules: [],
      },
    },
    {
      id: 'f4',
      code: 'title',
      entityName: INTEGRATED_RenderDynamicFields.DynamicFieldEntities.User,
      entityLevel: null,
      independent: true,
      label: 'Title',
      required: false,
      order: 3,
      placeholder: '',
      hiddenOnCreate: false,
      status: INTEGRATED_RenderDynamicFields.DynamicFieldStatuses.Active,
      fieldName: '',
      groupCode: null,
      helpText: '',
      tooltip: '',
      type: INTEGRATED_RenderDynamicFields.DynamicFieldTypes.Text,
      defaultValue: {},
      properties: {},
      validation: {
        rules: [],
      },
    },
    {
      id: 'f5',
      code: 'phoneNumber',
      hiddenOnCreate: false,
      status: INTEGRATED_RenderDynamicFields.DynamicFieldStatuses.Active,
      entityName: INTEGRATED_RenderDynamicFields.DynamicFieldEntities.User,
      entityLevel: null,
      independent: true,
      label: 'Phone Number',
      defaultValue: {},
      required: false,
      order: 4,
      placeholder: '',
      fieldName: '',
      groupCode: null,
      helpText: '',
      tooltip: '',
      type: INTEGRATED_RenderDynamicFields.DynamicFieldTypes.PhoneNumber,
      properties: {
        phoneCodeName: 'code',
        phoneNumberName: 'number',
      },
      validation: { rules: [] },
    },
    {
      id: 'f6',
      code: 'email',
      entityName: INTEGRATED_RenderDynamicFields.DynamicFieldEntities.User,
      entityLevel: null,
      independent: true,
      hiddenOnCreate: false,
      status: INTEGRATED_RenderDynamicFields.DynamicFieldStatuses.Active,
      label: 'Email',
      required: true,
      order: 5,
      placeholder: '',
      fieldName: '',
      groupCode: null,
      helpText: '',
      tooltip: '',
      type: INTEGRATED_RenderDynamicFields.DynamicFieldTypes.Text,
      defaultValue: {},
      properties: {},
      validation: {
        rules: [],
      },
    },
    {
      id: 'f7',
      code: 'defaultUnitId',
      hiddenOnCreate: false,
      status: INTEGRATED_RenderDynamicFields.DynamicFieldStatuses.Active,
      entityName: INTEGRATED_RenderDynamicFields.DynamicFieldEntities.User,
      entityLevel: null,
      independent: true,
      label: 'Default Unit',
      required: true,
      order: 6,
      placeholder: '',
      fieldName: '',
      groupCode: null,
      helpText: '',
      tooltip: '',
      defaultValue: {},
      type: INTEGRATED_RenderDynamicFields.DynamicFieldTypes.List,
      properties: {
        options: defaultUnitOptionsMock,
      },
      validation: {
        rules: [],
      },
    },
    {
      id: 'f8',
      code: 'languageDictionaryValueId',
      hiddenOnCreate: false,
      status: INTEGRATED_RenderDynamicFields.DynamicFieldStatuses.Active,
      entityName: INTEGRATED_RenderDynamicFields.DynamicFieldEntities.User,
      entityLevel: null,
      independent: true,
      label: 'Language',
      required: true,
      order: 7,
      placeholder: '',
      fieldName: '',
      groupCode: null,
      helpText: '',
      tooltip: '',
      type: INTEGRATED_RenderDynamicFields.DynamicFieldTypes.List,
      defaultValue: {},
      properties: {
        options: languageOptionsMock,
      },
      validation: {
        rules: [],
      },
    },
    {
      id: 'f9',
      code: 'allowMultipleSessions',
      hiddenOnCreate: false,
      status: INTEGRATED_RenderDynamicFields.DynamicFieldStatuses.Active,
      entityName: INTEGRATED_RenderDynamicFields.DynamicFieldEntities.User,
      defaultValue: {},
      entityLevel: null,
      independent: true,
      label: 'Multiple Sessions',
      required: false,
      order: 8,
      placeholder: '',
      fieldName: '',
      groupCode: null,
      helpText: '',
      tooltip: '',
      type: INTEGRATED_RenderDynamicFields.DynamicFieldTypes.Boolean,
      properties: {
        text: 'Allowed',
      },
      validation: {
        rules: [],
      },
    },
    {
      id: 'f10',
      code: 'allowDefaultPassword',
      hiddenOnCreate: false,
      status: INTEGRATED_RenderDynamicFields.DynamicFieldStatuses.Active,
      defaultValue: {},
      entityName: INTEGRATED_RenderDynamicFields.DynamicFieldEntities.User,
      entityLevel: null,
      independent: true,
      label: 'Default Password',
      required: false,
      order: 9,
      placeholder: '',
      fieldName: '',
      groupCode: null,
      helpText: '',
      tooltip: '',
      type: INTEGRATED_RenderDynamicFields.DynamicFieldTypes.Boolean,
      properties: {
        text: 'Allowed',
      },
      validation: {
        rules: [],
      },
    },
  ],
  customFields: [],
}

export const getUsersResponseMock: GetUsersResponseData = {
  limit: 10,
  totalItems: 3,
  page: 1,
  data: new Array(3).fill(null).map((_, i) => ({
    id: (i + 1).toString(),
    userName: `userName${i + 1}`,
    firstName: `firstName${i + 1}`,
    lastName: `lastName${i + 1}`,
    title: `title${i + 1}`,
    email: `userName${i + 1}@email.com`,
    status: UserStatuses.Active,
    lastLoginDate: new Date(2023, 5, 2).toLocaleDateString('en-US'),
  })),
}

export const getUserJobTypesResponseMock: GetUserJobTypesResponseData = new Array(5)
  .fill(null)
  .map((_, i) => ({
    id: (i + 1).toString(),
    jobTypeId: `jobTypeId${i + 1}`,
    jobTypeName: `jobTypeName${i + 1}`,
    unitId: `unitId${i + 1}`,
    unitName: `unitId${i + 1}`,
    validFrom: String(new Date()),
    validTo: String(new Date()),
    isActive: true,
    includeSubordinatedUnits: false,
    permissions: ['permission1', 'permission2', 'permission3'],
    createdAt: String(new Date()),
    updatedAt: null,
    updatedBy: null,
  }))

export const getUserCustomPermissionsMock: GetUserCustomPermissionsResponseData = new Array(5)
  .fill(null)
  .map((_, i) => ({
    id: (i + 1).toString(),
    permissionGroupId: `permissionGroupId${i + 1}`,
    permissionGroupName: `permissionGroupName${i + 1}`,
    permissionId: `permissionId${i + 1}`,
    permissionName: `permissionName${i + 1}`,
    unitId: `unitId${i + 1}`,
    unitName: `unitId${i + 1}`,
    includeSubordinatedUnits: false,
    validFrom: String(new Date()),
    validTo: String(new Date()),
    isActive: true,
    createdAt: String(new Date()),
    updatedAt: null,
    updatedBy: null,
  }))

export const getPermissionsBasicInfoResponseMock: GetPermissionsBasicInfoResponseData = [
  {
    id: '1',
    name: 'permission 1',
  },
  {
    id: '2',
    name: 'permission 2',
  },
]

export const createUserMock: CreateUserRequestData = {
  userName: 'John',
  firstName: 'Smith',
  lastName: 'J',
  title: 'Mr',
  email: 'email@email.asd',
  phoneCountryCode: '+380',
  phoneNumber: '123456789',
  allowMultipleSessions: true,
  allowDefaultPassword: true,
  languageDictionaryValueId: 1,
  defaultUnitId: 1,
}

export const getUserResponseMock: GetUserResponseData = {
  id: '1',
  userName: 'John',
  firstName: 'Smith',
  lastName: 'J',
  title: 'Mr',
  email: 'email@email.asd',
  phoneCountryCode: '+380',
  phoneNumber: '123456789',
  allowMultipleSessions: true,
  allowDefaultPassword: true,
  languageDictionaryValueId: 1,
  defaultUnitId: 1,
}

export const createUserJobTypeRequestDataMock: CreateUserJobTypeRequestData = {
  jobTypeId: 'jobTypeId1',
  unitId: 'unitId1',
  includeSubordinatedUnits: false,
  validFrom: String(new Date()),
  validTo: null,
}

export const createUserCustomPermissionRequestDataMock: CreateUserCustomPermissionRequestData = {
  permissionId: 'permissionId1',
  unitId: 'unitId1',
  includeSubordinatedUnits: false,
  validFrom: String(new Date()),
  validTo: null,
}
