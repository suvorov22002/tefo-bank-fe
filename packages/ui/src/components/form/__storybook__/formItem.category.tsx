import { ArgTypes } from '@storybook/react'

import { FormItemProps } from '../formItem'
import { setArgTypesTextControl } from '../../../__storybook__'

export const formItemCategory: Partial<ArgTypes<FormItemProps>> = {
  colon: {
    description: 'Used with label, whether to display : after label text.',
    table: {
      category: 'Form item',
      defaultValue: {
        summary: true,
      },
    },
  },
  extra: {
    description:
      'The extra prompt message. It is similar to help. Usage example: to display error message and prompt message at the same time',
    ...setArgTypesTextControl,
    table: {
      category: 'Form item',
    },
  },
  hasFeedback: {
    description:
      'Used with `validateStatus`, this option specifies the validation status icon. Recommended to be used only with `Input`',
    table: {
      category: 'Form item',
      defaultValue: {
        summary: false,
      },
    },
  },
  validateStatus: {
    description:
      'The validation status. If not provided, it will be generated by validation rule. options: success warning error validating',
    table: {
      category: 'Form item',
    },
  },
  help: {
    description:
      'The prompt message. If not provided, the prompt message will be generated by the validation rule. ',
    ...setArgTypesTextControl,
    table: {
      category: 'Form item',
    },
  },
  htmlFor: {
    description: 'Set sub label `htmlFor`',
    table: {
      category: 'Form item',
    },
  },
  noStyle: {
    description: 'No style for `true`, used as a pure field control',
    table: {
      category: 'Form item',
      defaultValue: {
        summary: false,
      },
    },
  },
  required: {
    description: 'Display required style. It will be generated by the validation rule',
    table: {
      category: 'Form item',
      defaultValue: {
        summary: false,
      },
    },
  },
  tooltip: {
    description: 'Config tooltip info',
    table: {
      category: 'Form item',
    },
  },
  wrapperCol: {
    description:
      'The layout for input controls, same as `labelCol`. You can set `wrapperCol` on Form which will not affect nest Item. If both exists, use Item first',
    table: {
      category: 'Form item',
    },
  },
  label: {
    description: 'Label text',
    ...setArgTypesTextControl,
    table: {
      category: 'Form item',
    },
  },
  labelCol: {
    description:
      'The layout of label. You can set `span offset` to something like `{span: 3, offset: 12}` or `sm: {span: 3, offset: 12}` same as with `<Col>`. You can set `labelCol` on Form which will not affect nest Item. If both exists, use Item first',
    table: {
      category: 'Form item',
    },
  },
  labelAlign: {
    description: 'The text align of label',
    table: {
      category: 'Form item',
      defaultValue: {
        summary: '"right"',
      },
    },
  },
}
